//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.DatabaseManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.InputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.DigitalInputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.AnalogInputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.OutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.AnalogOutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.DigitalOutputTag))]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IoAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IoAddress {
            get {
                return this.IoAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IoAddressField, value) != true)) {
                    this.IoAddressField = value;
                    this.RaisePropertyChanged("IoAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.InputTags")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.DigitalInputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.AnalogInputTag))]
    public partial class InputTag : DatabaseManager.DatabaseManagerService.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.DatabaseManagerService.DriverType DriverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ScanOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScanTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.DatabaseManagerService.DriverType Driver {
            get {
                return this.DriverField;
            }
            set {
                if ((this.DriverField.Equals(value) != true)) {
                    this.DriverField = value;
                    this.RaisePropertyChanged("Driver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ScanOn {
            get {
                return this.ScanOnField;
            }
            set {
                if ((this.ScanOnField.Equals(value) != true)) {
                    this.ScanOnField = value;
                    this.RaisePropertyChanged("ScanOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalInputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.InputTags")]
    [System.SerializableAttribute()]
    public partial class DigitalInputTag : DatabaseManager.DatabaseManagerService.InputTag {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogInputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.InputTags")]
    [System.SerializableAttribute()]
    public partial class AnalogInputTag : DatabaseManager.DatabaseManagerService.InputTag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.DatabaseManagerService.Alarm[] AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.DatabaseManagerService.Alarm[] Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmsField, value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.OutputTags")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.AnalogOutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.DatabaseManagerService.DigitalOutputTag))]
    public partial class OutputTag : DatabaseManager.DatabaseManagerService.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InitialValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogOutputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.OutputTags")]
    [System.SerializableAttribute()]
    public partial class AnalogOutputTag : DatabaseManager.DatabaseManagerService.OutputTag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalOutputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags")]
    [System.SerializableAttribute()]
    public partial class DigitalOutputTag : DatabaseManager.DatabaseManagerService.OutputTag {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DriverType", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.InputTags")]
    public enum DriverType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SIMULATION_DRIVER = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REAL_TIME_DRIVER = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.InputTags")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlarmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.DatabaseManagerService.AlarmType AlarmTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlarmId {
            get {
                return this.AlarmIdField;
            }
            set {
                if ((this.AlarmIdField.Equals(value) != true)) {
                    this.AlarmIdField = value;
                    this.RaisePropertyChanged("AlarmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.DatabaseManagerService.AlarmType AlarmType {
            get {
                return this.AlarmTypeField;
            }
            set {
                if ((this.AlarmTypeField.Equals(value) != true)) {
                    this.AlarmTypeField = value;
                    this.RaisePropertyChanged("AlarmType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmType", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Tags.InputTags")]
    public enum AlarmType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOW = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIGH = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagTransfer", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.TransferObjects")]
    [System.SerializableAttribute()]
    public partial class TagTransfer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.DatabaseManagerService.Tag TagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.DatabaseManagerService.Tag Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseManagerService.IAuthentication")]
    public interface IAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/RegisterUser", ReplyAction="http://tempuri.org/IAuthentication/RegisterUserResponse")]
        bool RegisterUser(string username, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/RegisterUser", ReplyAction="http://tempuri.org/IAuthentication/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        void Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UsersEmpty", ReplyAction="http://tempuri.org/IAuthentication/UsersEmptyResponse")]
        bool UsersEmpty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/UsersEmpty", ReplyAction="http://tempuri.org/IAuthentication/UsersEmptyResponse")]
        System.Threading.Tasks.Task<bool> UsersEmptyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsUserAdmin", ReplyAction="http://tempuri.org/IAuthentication/IsUserAdminResponse")]
        bool IsUserAdmin(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/IsUserAdmin", ReplyAction="http://tempuri.org/IAuthentication/IsUserAdminResponse")]
        System.Threading.Tasks.Task<bool> IsUserAdminAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationChannel : DatabaseManager.DatabaseManagerService.IAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationClient : System.ServiceModel.ClientBase<DatabaseManager.DatabaseManagerService.IAuthentication>, DatabaseManager.DatabaseManagerService.IAuthentication {
        
        public AuthenticationClient() {
        }
        
        public AuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterUser(string username, string password, string token) {
            return base.Channel.RegisterUser(username, password, token);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password, string token) {
            return base.Channel.RegisterUserAsync(username, password, token);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Logout(string token) {
            base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
        
        public bool UsersEmpty() {
            return base.Channel.UsersEmpty();
        }
        
        public System.Threading.Tasks.Task<bool> UsersEmptyAsync() {
            return base.Channel.UsersEmptyAsync();
        }
        
        public bool IsUserAdmin(string token) {
            return base.Channel.IsUserAdmin(token);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserAdminAsync(string token) {
            return base.Channel.IsUserAdminAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseManagerService.ITagWork")]
    public interface ITagWork {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/AddTag", ReplyAction="http://tempuri.org/ITagWork/AddTagResponse")]
        string AddTag(DatabaseManager.DatabaseManagerService.Tag tag, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/AddTag", ReplyAction="http://tempuri.org/ITagWork/AddTagResponse")]
        System.Threading.Tasks.Task<string> AddTagAsync(DatabaseManager.DatabaseManagerService.Tag tag, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/DeleteTag", ReplyAction="http://tempuri.org/ITagWork/DeleteTagResponse")]
        bool DeleteTag(string tagName, string type, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/DeleteTag", ReplyAction="http://tempuri.org/ITagWork/DeleteTagResponse")]
        System.Threading.Tasks.Task<bool> DeleteTagAsync(string tagName, string type, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/GetTags", ReplyAction="http://tempuri.org/ITagWork/GetTagsResponse")]
        DatabaseManager.DatabaseManagerService.Tag[] GetTags(string token, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/GetTags", ReplyAction="http://tempuri.org/ITagWork/GetTagsResponse")]
        System.Threading.Tasks.Task<DatabaseManager.DatabaseManagerService.Tag[]> GetTagsAsync(string token, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/ChangeTagScan", ReplyAction="http://tempuri.org/ITagWork/ChangeTagScanResponse")]
        bool ChangeTagScan(string token, string tagName, bool scanOn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/ChangeTagScan", ReplyAction="http://tempuri.org/ITagWork/ChangeTagScanResponse")]
        System.Threading.Tasks.Task<bool> ChangeTagScanAsync(string token, string tagName, bool scanOn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/GetOutputTagValues", ReplyAction="http://tempuri.org/ITagWork/GetOutputTagValuesResponse")]
        DatabaseManager.DatabaseManagerService.TagTransfer[] GetOutputTagValues(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/GetOutputTagValues", ReplyAction="http://tempuri.org/ITagWork/GetOutputTagValuesResponse")]
        System.Threading.Tasks.Task<DatabaseManager.DatabaseManagerService.TagTransfer[]> GetOutputTagValuesAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/ChangeOutputTagValue", ReplyAction="http://tempuri.org/ITagWork/ChangeOutputTagValueResponse")]
        bool ChangeOutputTagValue(string tagName, string type, string token, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/ChangeOutputTagValue", ReplyAction="http://tempuri.org/ITagWork/ChangeOutputTagValueResponse")]
        System.Threading.Tasks.Task<bool> ChangeOutputTagValueAsync(string tagName, string type, string token, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/AddAlarm", ReplyAction="http://tempuri.org/ITagWork/AddAlarmResponse")]
        bool AddAlarm(string tagName, DatabaseManager.DatabaseManagerService.Alarm alarm, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/AddAlarm", ReplyAction="http://tempuri.org/ITagWork/AddAlarmResponse")]
        System.Threading.Tasks.Task<bool> AddAlarmAsync(string tagName, DatabaseManager.DatabaseManagerService.Alarm alarm, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/DeleteAlarm", ReplyAction="http://tempuri.org/ITagWork/DeleteAlarmResponse")]
        bool DeleteAlarm(string tagName, int alarmId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagWork/DeleteAlarm", ReplyAction="http://tempuri.org/ITagWork/DeleteAlarmResponse")]
        System.Threading.Tasks.Task<bool> DeleteAlarmAsync(string tagName, int alarmId, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagWorkChannel : DatabaseManager.DatabaseManagerService.ITagWork, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagWorkClient : System.ServiceModel.ClientBase<DatabaseManager.DatabaseManagerService.ITagWork>, DatabaseManager.DatabaseManagerService.ITagWork {
        
        public TagWorkClient() {
        }
        
        public TagWorkClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagWorkClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagWorkClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagWorkClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddTag(DatabaseManager.DatabaseManagerService.Tag tag, string token) {
            return base.Channel.AddTag(tag, token);
        }
        
        public System.Threading.Tasks.Task<string> AddTagAsync(DatabaseManager.DatabaseManagerService.Tag tag, string token) {
            return base.Channel.AddTagAsync(tag, token);
        }
        
        public bool DeleteTag(string tagName, string type, string token) {
            return base.Channel.DeleteTag(tagName, type, token);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTagAsync(string tagName, string type, string token) {
            return base.Channel.DeleteTagAsync(tagName, type, token);
        }
        
        public DatabaseManager.DatabaseManagerService.Tag[] GetTags(string token, string type) {
            return base.Channel.GetTags(token, type);
        }
        
        public System.Threading.Tasks.Task<DatabaseManager.DatabaseManagerService.Tag[]> GetTagsAsync(string token, string type) {
            return base.Channel.GetTagsAsync(token, type);
        }
        
        public bool ChangeTagScan(string token, string tagName, bool scanOn) {
            return base.Channel.ChangeTagScan(token, tagName, scanOn);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeTagScanAsync(string token, string tagName, bool scanOn) {
            return base.Channel.ChangeTagScanAsync(token, tagName, scanOn);
        }
        
        public DatabaseManager.DatabaseManagerService.TagTransfer[] GetOutputTagValues(string token) {
            return base.Channel.GetOutputTagValues(token);
        }
        
        public System.Threading.Tasks.Task<DatabaseManager.DatabaseManagerService.TagTransfer[]> GetOutputTagValuesAsync(string token) {
            return base.Channel.GetOutputTagValuesAsync(token);
        }
        
        public bool ChangeOutputTagValue(string tagName, string type, string token, double newValue) {
            return base.Channel.ChangeOutputTagValue(tagName, type, token, newValue);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeOutputTagValueAsync(string tagName, string type, string token, double newValue) {
            return base.Channel.ChangeOutputTagValueAsync(tagName, type, token, newValue);
        }
        
        public bool AddAlarm(string tagName, DatabaseManager.DatabaseManagerService.Alarm alarm, string token) {
            return base.Channel.AddAlarm(tagName, alarm, token);
        }
        
        public System.Threading.Tasks.Task<bool> AddAlarmAsync(string tagName, DatabaseManager.DatabaseManagerService.Alarm alarm, string token) {
            return base.Channel.AddAlarmAsync(tagName, alarm, token);
        }
        
        public bool DeleteAlarm(string tagName, int alarmId, string token) {
            return base.Channel.DeleteAlarm(tagName, alarmId, token);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAlarmAsync(string tagName, int alarmId, string token) {
            return base.Channel.DeleteAlarmAsync(tagName, alarmId, token);
        }
    }
}
